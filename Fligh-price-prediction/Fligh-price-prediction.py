# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cJ5krUmldixm61fFAX5pO6iCSq_5LP8D
"""

!pip install streamlit

# app.py
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import joblib

# Title
st.title("‚úàÔ∏è Flight Fare Prediction App")

def con_to_mins(duration):
    hrs = 0
    mins = 0
    if 'h' in duration:
        hrs = int(duration.split('h')[0].strip())
    if 'm' in duration:
        mins_part = duration.split('h')[-1] if 'h' in duration else duration
        mins = int(mins_part.replace('m', '').strip())
    return hrs * 60 + mins



# Load dataset
@st.cache_data
def load_data():
    df = pd.read_excel("Flight-price-predication.xlsx")
    df['Date_of_Journey'] = pd.to_datetime(df['Date_of_Journey'], format='%d/%m/%Y')
    df['Day'] = df['Date_of_Journey'].dt.day_name()
    df['weekdayornot'] = df['Day'].apply(lambda x: "Weekend" if x in ["Sunday", "Saturday"] else "Weekday")
    df.drop(['Date_of_Journey', 'Day', 'Dep_Time', 'Arrival_Time', 'Route'], axis=1, inplace=True)
    df.dropna(inplace=True)
    df['Duration'] = df['Duration'].apply(con_to_mins)
    df = pd.get_dummies(df, columns=['Airline', 'Source', 'Destination', 'Total_Stops', 'Additional_Info', 'weekdayornot'], drop_first=True)
    return df

df = load_data()

# Data Split
X = df.drop("Price", axis=1)
y = df["Price"]
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=23062005)

# Scaling
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

# Model Selection
model_choice = st.selectbox("Select Model", ["Linear Regression", "Decision Tree"])

if model_choice == "Linear Regression":
    model = LinearRegression()
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)
else:
    params = {
        'max_depth': [10],
        'min_samples_split': [10],
        'min_samples_leaf': [1],
        'max_features': [None]
    }
    grid = GridSearchCV(DecisionTreeRegressor(random_state=23062005), param_grid=params, cv=3, n_jobs=-1)
    grid.fit(x_train_scaled, y_train)
    model = grid.best_estimator_
    y_pred = model.predict(x_test_scaled)

# Evaluation
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100

st.subheader("üìä Model Evaluation")
st.write(f"**R¬≤ Score:** {r2*100:.2f}")
st.write(f"**MAE:** {mae:.2f}")
st.write(f"**MSE:** {mse:.2f}")
st.write(f"**RMSE:** {rmse:.2f}")
st.write(f"**MAPE:** {mape:.2f} %")